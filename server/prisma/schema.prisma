// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int        @id @default(autoincrement())
  username String     @unique
  password String
  email    String     @unique
  roleId   Int
  role     Role       @relation(fields: [roleId], references: [id])
  File     File[]
  AuditLog AuditLog[]

  @@map("Users")
}

model Role {
  id              Int              @id @default(autoincrement())
  role            String           @unique
  users           User[] // Prisma автоматически свяжет с User.role
  rolePermissions RolePermission[]

  @@map("Roles")
}

model Permission {
  id              Int              @id @default(autoincrement())
  permission      String           @unique
  rolePermissions RolePermission[]

  @@map("Permissions")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("RolePermissions")
}

model File {
  id         Int            @id @default(autoincrement())
  key        String         @unique
  filename   String
  userId     Int?
  user       User?          @relation(fields: [userId], references: [id])
  createdAt  DateTime       @default(now())
  deletedAt  DateTime?
  categories FileCategory[]

  @@map("Files")
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  files FileCategory[]

  @@map("Categories")
}

model FileCategory {
  id         Int @id @default(autoincrement())
  fileId     Int
  categoryId Int

  file     File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([fileId, categoryId])
  @@map("FileCategories")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())

  @@map("AuditLogs")
}
